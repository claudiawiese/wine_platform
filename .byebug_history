exit
review.save!
review_params
exit
review_params
review.save!
exit
review_params
review.save!
exit
review.save!
review.save
continue
exit
 get '/reviews', headers: { 'Authorization' => "Bearer #{@devise_api_token.access_token }"}
exit
 get '/reviews', headers: { 'Authorization' => "Bearer #{@devise_api_token.access_token }"}
exit
{ 'Authorization' => "Bearer #{@devise_api_token.access_token }"}
headers: { 'Authorization' => "Bearer #{@devise_api_token.access_token }"}
get '/reviews', headers: { 'Authorization' => "Bearer #{@devise_api_token.access_token }"}
@devise_api_token
exit
 get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
sign_in user
 get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
devise_api_token.access_token
 get '/reviews'
 get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
user.reviews
user1.reviews
review2
review1
Reviews.all
 get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
sign_in user
get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
devise_api_token
user
continue
 render json: @reviews
exit
 json = JSON.parse(response.body)
 get "/reviews/#{review1.id}", headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
exit
  get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
review2
review1
Wine.all
wine
continue
exit
devise_api_token.access_token
devise_api_token.token
  let(:devise_api_token) { create(:devise_api_token, resource_owner: user) }
get '/reviews', headers: { 'Authorization' => "Bearer #{devise_api_token.access_token}" }
continue
exit
get '/reviews/${review1.id}'
get '/reviews/#{review1.id}'
get '/reviews/{review1}'
get '/reviews/1'
exit
User.find(159)
devise_api_token
exit
 post '/users/tokens/sign_in',
        params: {
          email: user.email,
          password: user.password
        }
 post '/users/tokens/sign_in',
        params: {
          email: user.email,
          password: user.password
        }.to_json
   post '/users/tokens/sign_in',
        params: { 
          user: { 
            email: user.email, 
            password: user.password 
          } 
        }
JSON.parse(response.body)
 @auth_token = JSON.parse(response.body)['token']
   post '/users/tokens/sign_in',
        params: { 
          user: { 
            email: user.email, 
            password: user.password 
          } 
        }, 
        headers: { 'Content-Type' => 'application/json', 'Accept' => 'application/json' }
 post '/users/tokens/sign_in',
        params: {
          email: user.email,
          password: user.password
        }.to_json,
        headers: { 'Content-Type' => 'application/json' }
  params: {
          email: user.email,
          password: user.password
        }.to_json,
  post '/users/tokens/sign_in', params: {
        email: user.email,
        password: user.password
      }, as: :json
sign_in user
continue
@auth_token
exit
 post '/users/tokens/sign_in', params: {
                user: {
                  email: user.email,
                  password: user.password
                }
              }
continue
 @auth_token = JSON.parse(response.body)['token']
exit
user.email
JSON.parse(response.body)
exit
JSON.parse(response.body)
 @auth_token = JSON.parse(response.body)['token']
exit
get '/reviews'
get/reviews
sign_in user
exit
get '/reviews'
exit
get '/reviews'
exit
get '/reviews'
sign_in user
exit
user.access_token
user.accesss_token
@auth_token
exit
json.first['average_rating'] == 5.0
json.first['average_rating'] == '5.0'
json.first['average_rating']
exit
json.first
exit
json.first['name']
json[1]['name']
exit
json[1]
json[2]
json[0]
exit
continue
Wine.first
exit
@wine1.prices
 create(:price_history, wine: @wine1, price: 1000.0, recorded_at: Time.now - 1.year)
 @wine1 = create(:wine, name: "Chateau Margaux", variety: "Red Bordeaux Blend", region: "Margaux, Bordeaux, France", year: 2015)
 create(:price_history, wine: @wine1, price: 1000.0, recorded_at: Time.now - 1.year)
 @wine1 = create(:wine, name: "Chateau Margaux", variety: "Red Bordeaux Blend", region: "Margaux, Bordeaux, France", year: 2015)
    8:         @wine2 = create(:wine,name: "Penfolds Grange",variety: "Shiraz",region: "Barossa Valley, South Australia", year: 2010)
create(:wine, name: "Chateau Margaux", variety: "Red Bordeaux Blend", region: "Margaux, Bordeaux, France", year: 2015)
